#include "./aie_graph.h"
#include "./config.h"

#define DATA_SIZE (INPUT_BITS/32)
#define N_ITER 1

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <fstream>
#include <cstring>
#define AP_INT_MAX_W 16384
#include <ap_int.h>

// This is used for the PL Kernels
#include "xrt/xrt.h"
#include "xrt/experimental/xrt_kernel.h"

// Using the ADF API that call XRT API
#include "adf/adf_api/XRTConfig.h"
simpleGraph addergraph;
static std::vector<char> load_xclbin(xrtDeviceHandle device, const std::string& fnm) {
    if (fnm.empty()) throw std::runtime_error("No xclbin specified");

    std::ifstream stream(fnm);
    stream.seekg(0, stream.end);
    size_t size = stream.tellg();
    stream.seekg(0, stream.beg);

    std::vector<char> header(size);
    stream.read(header.data(), size);

    auto top = reinterpret_cast<const axlf*>(header.data());
    if (xrtDeviceLoadXclbin(device, top)) throw std::runtime_error("Xclbin loading failed");

    return header;
}

template<int N>
ap_uint<N> montpro(ap_uint<N> a, ap_uint<N> b, ap_uint<N> m, ap_uint<N> u){
    ap_uint<N * 2> d = a;
    d *= b;
    ap_uint<N * 2> t = d * u;
    ap_uint<N> c = t(N - 1, 0);
    ap_uint<N * 2> e = c * m;
    ap_uint<N * 2> res = d + e;
    ap_uint<N> result = res(N * 2 - 1, N);
    if(result > m) result = result - m;
    return result;
}

std::string getKey(std::string path){
	std::ifstream ifs;
	ifs.open(path);
	std::string ss = "";
    std::getline(ifs, ss);
	return ss;
}

int main(int argc, char** argv) {

    int en_repeat = 1;
    int de_repeat = 1;
    int enable_vrf = 1;
    bool block_ddr = false;
    uint32_t batch = 1 * 2;
    // int e = 3;

    if(argc == 7){
        batch = atoi(argv[2]);
        en_repeat = atoi(argv[3]);
        de_repeat = atoi(argv[4]);
        enable_vrf = atoi(argv[5]); 
        block_ddr = (atoi(argv[6]) == 1);
        // e = atoi(argv[6]);
    }
    
    // const uint32_t BATCH = batch;
    std::cout << "encryption repeat " << en_repeat << " times" << std::endl;
    std::cout << "decryption repeat " << de_repeat << " times" << std::endl;
    std::cout << "batch " << batch << std::endl;
    // std::cout << "e " << e << std::endl;
    std::cout << "software verify?  " << (enable_vrf == 1 ? "yes" : "no") << std::endl;


    //////////////////////////////////////////
    // Open xclbin
    //////////////////////////////////////////
    auto dhdl = xrtDeviceOpen(0); // Open Device the local device
    if (dhdl == nullptr) throw std::runtime_error("No valid device handle found. Make sure using right xclOpen index.");
    auto xclbin = load_xclbin(dhdl, "krnl_adder.xclbin");
    auto top = reinterpret_cast<const axlf*>(xclbin.data());
    adf::registerXRT(dhdl, top->m_header.uuid);

    const int sizeIn = DATA_SIZE;
    const int sizeOut = DATA_SIZE * 2;

    ap_uint<INPUT_BITS> m("0x
    ap_uint<INPUT_BITS> mp("0x72764BE410C775BE07AF77D2AC0E5B1DF97A9B40A30056596B538A65F3001C857E8253B661D62A27FA7FDA183386BB455B0EAC33B4C5678E6AC03E6147B81C00A5D39A2C35133838428E664CDC2A1259CD94E25716931B5EB3A1AFBF6535C16BFC790C1A623D2C2A09DEAFAA55A606121C27C668069AACD33F2F7DA71C06486946B91484C303CE343758606FDAB195FA2B7B647A5AFD031EE7D95F5077FA808B7D6F8FB7FFE5095B4F090260B4971BE6D6515929534AD9B7F67AEFBB71BBF83DCE3D1B9725F14CABC603B6B30A6E7D712983A25D8E50E25A05CFFA1EA1B468581F2BA1262D82EC9DB9E1AA392EA91B68F988E1FD0CDF4AB6E0AC37EA2D6F8862AEF1965B5C40FA4E97309B16B92015AD6956CFA390AD3BD8AF19BBE679B56F500ED77D4F6F393996FF2F31F43BEBE9858E70F863D67A59506DC6366AFB363B554CE71BC6EABE2D0A4BA2CF5407AECD4EA1AE278CECC00F96A6E746E9D5DAECA802E83C0187357874C128DDDCD131676A9122B4075E5CC10C1FB09FB8BCD38511C55630EB644263C95805749B8C64D16097EB2F6865CC9A407C1E67986B00665F9ACC584CAC1A04DC2CC9FB223DCA004E1131B3144CAFC1FB53E739E028F3C89B2ABD87070374269F2CAFB2A0D8BACA90EF8CD92235E0738D5113450A2D781EAFC1E5D243DE27064A37CB37197F6B8A1B3A2167525A00B8B80689048E7244011EC4A96DF38152B04192AB6324C658D4A77511CF7C86D4F61D27FA6DDDF9862D7A9D1F9F2366D8AA619B3FE7C72526B1F8D75FACC4F8B546BEB8F540A1DB56A49CD3BBC1039886915D6745B34B8CD7F2B74258FF3F43D4FB88C46F27C3BAF287884ECA3BAC876398BC6863AAD01F0FC3870266F019C72394DECEC7349E5DAC4D683C9F97CFC1234D37366E2F31F4CA9895A0B1801EEC5A4D24F2BB4CFC3A402731914C98FEE1FC1F3BA8659E79B6260BB8916F0FD81D84DC0E980FA1EA38FB918DEB436D71413EDCFE1C43141D00F93FE5AF1906774A335F1F990B8B2AB55BE778EF7EF0E7C0A30D9A3C9D85780AB0805884555E7A5E82FED94B3D2A43274EB2EECFEF345D117C62920F8E8A1178466B229D74BA1CF9E494A0BA7F307BF5CEB137AF4E1C650F5C3468F1C97093441DF317ABCA32A01C5347405C4D6D78E3C7434570A0C1829A3224A45067C7C164B6104351263D2BBE71F97B9195CC2A1BA9058EA66DC422DF2F389B02A1AAB67D5708E941297D377BE5D512A34019C25B8C4F8FA92EA488B6D7E66E0C72DE95881AE3AE4936DFB5958BA94F67163491FF52740104F35081D64FAD717B9FF77727A8D78BF88AC74943E94E3F624E6B9252885B8F92483808DE9DFC0B9650EFC243DACD264BE27F5CA3230BB75D5237DA641D5941D4857638228F81F4FF63E4C424DEA0F103D720E7556EDE1A070CEDDA60D22C6F");
    ap_uint<INPUT_BITS> rmod("0x
    ap_uint<INPUT_BITS> rMod_x_1("0x
    ap_uint<INPUT_BITS> pub_e("0x10001");
    ap_uint<INPUT_BITS> prv_e("0x

    uint32_t * buf_n = (uint32_t *) malloc(INPUT_BITS / 8);
    uint32_t * buf_pub_e = (uint32_t *) malloc(INPUT_BITS / 8);
    uint32_t * buf_prv_e = (uint32_t *) malloc(INPUT_BITS / 8);
    uint32_t * buf_nInv = (uint32_t *) malloc(INPUT_BITS / 8);
    uint32_t * buf_rMod = (uint32_t *) malloc(INPUT_BITS / 8);
    uint32_t * buf_rMod_x_1 = (uint32_t *) malloc(INPUT_BITS / 8);

    for(int i = 0; i < INPUT_BITS / 32; ++i){
        buf_n[i] = m((i + 1) * 32 - 1, i * 32);
        buf_pub_e[i] = pub_e((i + 1) * 32 - 1, i * 32);
        buf_prv_e[i] = prv_e((i + 1) * 32 - 1, i * 32);
        buf_nInv[i] = mp((i + 1) * 32 - 1, i * 32);
        buf_rMod[i] = rmod((i + 1) * 32 - 1, i * 32);
        buf_rMod_x_1[i] = rMod_x_1((i + 1) * 32 - 1, i * 32);
    }
    srand(time(0));

    uint32_t *data_in_0 = (uint32_t *) malloc(batch * INPUT_BITS / 8);
    uint32_t *cypher_0 = (uint32_t *) malloc(batch * INPUT_BITS / 8);
for(int i = 0; i < batch; ++i){
        ap_uint<INPUT_BITS> tmp;

        for(int j = 0; j < INPUT_BITS / 32; ++j){
            tmp((j + 1) * 32 - 1, j * 32) = rand();
        }
        tmp %= m;
        for(int j = 0; j < INPUT_BITS / 32; ++j){
            data_in_0[i * INPUT_BITS / 32 + j] = tmp((j + 1) * 32 - 1, j * 32);
        }
}

    


    xrtBufferHandle data_in_hdl_0 = xrtBOAlloc(dhdl, batch * INPUT_BITS / 8, 0, 0);
    auto data_in_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(data_in_hdl_0));
    memcpy(data_in_mapped_0, data_in_0, batch * INPUT_BITS / 8);

    xrtBufferHandle exp_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto exp_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(exp_hdl_0));
    memcpy(exp_mapped_0, buf_pub_e, INPUT_BITS / 8);

    xrtBufferHandle n_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto n_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(n_hdl_0));
    memcpy(n_mapped_0, buf_n, INPUT_BITS / 8);

    xrtBufferHandle nInv_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto nInv_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(nInv_hdl_0));
    memcpy(nInv_mapped_0, buf_nInv, INPUT_BITS / 8);

    xrtBufferHandle rMod_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto rMod_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(rMod_hdl_0));
    memcpy(rMod_mapped_0, buf_rMod, INPUT_BITS / 8);

    xrtBufferHandle rMod_x_1_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto rMod_x_1_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(rMod_x_1_hdl_0));
    memcpy(rMod_x_1_mapped_0, buf_rMod_x_1, INPUT_BITS / 8);

    xrtBufferHandle data_out_hdl_0 = xrtBOAlloc(dhdl, batch * INPUT_BITS / 8, 0, 0);
    auto data_out_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(data_out_hdl_0));
    memset(data_out_mapped_0, 0xABCDEF00, batch * INPUT_BITS / 8);



    printf("graph init. This does nothing because CDO in boot PDI already configures AIE.\n");
    addergraph.init();

    printf("graph run\n");
    addergraph.run(-1);


    double kernel_time_in_sec = 0;
    std::chrono::duration<double> kernel_time(0);
    auto kernel_start = std::chrono::high_resolution_clock::now();

    xrtKernelHandle pl_kernel_khdl1_0 = xrtPLKernelOpen(dhdl, top->m_header.uuid, "pl_kernel:{pl_kernel_0}");

    xrtRunHandle pl_kernel_rhdl1_0 = xrtKernelRun(pl_kernel_khdl1_0, data_in_hdl_0, data_out_hdl_0, exp_hdl_0, n_hdl_0, nInv_hdl_0, rMod_hdl_0, rMod_x_1_hdl_0, 20, batch, en_repeat, block_ddr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr);

    auto state_0 = xrtRunWait(pl_kernel_rhdl1_0);

    for(uint32_t i = 0; i < batch * INPUT_BITS / 32; ++i){
        cypher_0[i] = data_out_mapped_0[i];
    }
auto kernel_end = std::chrono::high_resolution_clock::now();
    kernel_time = std::chrono::duration<double>(kernel_end - kernel_start);
    kernel_time_in_sec = kernel_time.count();
    std::cout << "encryption repeat: " << en_repeat << std::endl;
    std::cout << "encryption time: " << kernel_time_in_sec << " sec" << std::endl;


    xrtRunClose(pl_kernel_rhdl1_0);
    xrtKernelClose(pl_kernel_khdl1_0);



    xrtBufferHandle decrypt_data_in_hdl_0 = xrtBOAlloc(dhdl, batch * INPUT_BITS / 8, 0, 0);
    auto decrypt_data_in_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_data_in_hdl_0));
    memcpy(decrypt_data_in_mapped_0, cypher_0, batch * INPUT_BITS / 8);

    xrtBufferHandle decrypt_exp_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto decrypt_exp_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_exp_hdl_0));
    memcpy(decrypt_exp_mapped_0, buf_prv_e, INPUT_BITS / 8);

    xrtBufferHandle decrypt_n_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto decrypt_n_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_n_hdl_0));
    memcpy(decrypt_n_mapped_0, buf_n, INPUT_BITS / 8);

    xrtBufferHandle decrypt_nInv_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto decrypt_nInv_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_nInv_hdl_0));
    memcpy(decrypt_nInv_mapped_0, buf_nInv, INPUT_BITS / 8);

    xrtBufferHandle decrypt_rMod_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto decrypt_rMod_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_rMod_hdl_0));
    memcpy(decrypt_rMod_mapped_0, buf_rMod, INPUT_BITS / 8);

    xrtBufferHandle decrypt_rMod_x_1_hdl_0 = xrtBOAlloc(dhdl, INPUT_BITS / 8, 0, 0);
    auto decrypt_rMod_x_1_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_rMod_x_1_hdl_0));
    memcpy(decrypt_rMod_x_1_mapped_0, buf_rMod_x_1, INPUT_BITS / 8);

    xrtBufferHandle decrypt_data_out_hdl_0 = xrtBOAlloc(dhdl, batch * INPUT_BITS / 8, 0, 0);
    auto decrypt_data_out_mapped_0 = reinterpret_cast<uint32_t*>(xrtBOMap(decrypt_data_out_hdl_0));
    memset(decrypt_data_out_mapped_0, 0xABCDEF00, batch * INPUT_BITS / 8);
kernel_start = std::chrono::high_resolution_clock::now();
  
    xrtKernelHandle pl_kernel_khdl2_0 = xrtPLKernelOpen(dhdl, top->m_header.uuid, "pl_kernel:{pl_kernel_0}");
  
    xrtRunHandle pl_kernel_rhdl2_0 = xrtKernelRun(pl_kernel_khdl2_0, decrypt_data_in_hdl_0, decrypt_data_out_hdl_0, decrypt_exp_hdl_0, decrypt_n_hdl_0, decrypt_nInv_hdl_0, decrypt_rMod_hdl_0, decrypt_rMod_x_1_hdl_0, INPUT_BITS, batch, de_repeat, block_ddr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr);
  
    auto state2_0 = xrtRunWait(pl_kernel_rhdl2_0);
kernel_end = std::chrono::high_resolution_clock::now();
    kernel_time = std::chrono::duration<double>(kernel_end - kernel_start);
    kernel_time_in_sec = kernel_time.count();
    std::cout << "decryption repeat: " << de_repeat << std::endl;
    std::cout << "decryption time: " << kernel_time_in_sec << " sec" << std::endl;


    int errorCount = 0;
    if(enable_vrf == 1)
    {
  
        for(int i = 0; i < batch * INPUT_BITS / 32; ++i){
            if(decrypt_data_out_mapped_0[i] != data_in_0[i]){
                errorCount++;
                std::cout << "plaintext[" << i << "]: " << data_in_0[i] << " != " << "decryption[" << i << "]: " << decrypt_data_out_mapped_0[i] << std::endl;
            }
        }
if (errorCount)
            printf("Test(%d) failed with %d errors\n", 1 * batch * INPUT_BITS / 32, errorCount);
        else
            printf("TEST PASSED!!\n");
    }

  
    xrtBOFree(data_in_hdl_0);
    xrtBOFree(exp_hdl_0);
    xrtBOFree(n_hdl_0);
    xrtBOFree(nInv_hdl_0);
    xrtBOFree(rMod_hdl_0);
    xrtBOFree(rMod_x_1_hdl_0);
    xrtBOFree(data_out_hdl_0);

    xrtBOFree(decrypt_data_in_hdl_0);
    xrtBOFree(decrypt_exp_hdl_0);
    xrtBOFree(decrypt_n_hdl_0);
    xrtBOFree(decrypt_nInv_hdl_0);
    xrtBOFree(decrypt_rMod_hdl_0);
    xrtBOFree(decrypt_rMod_x_1_hdl_0);
    xrtBOFree(decrypt_data_out_hdl_0);
    free(data_in_0);
    free(cypher_0);
free(buf_n);
    free(buf_pub_e);
    free(buf_prv_e);
    free(buf_nInv);
    free(buf_rMod);
    free(buf_rMod_x_1);

    xrtDeviceClose(dhdl);
    return 0;

}