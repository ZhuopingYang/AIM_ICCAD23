#include <ap_int.h>
#include <hls_stream.h>
#include <ap_axi_sdata.h>
#include <stdio.h>
#include <stdint.h>
#include <math.h>
#include "config.h"


void merge_phase2(hls::stream<ap_uint<DDR_BITS>> &final_merge_out, hls::stream<ap_uint<DDR_BITS>> &serialize_out, const uint32_t batch, const uint32_t repeat){
    // generate
    uint16_t shift[64] = { {{shift2}} };
    for(uint32_t rep = 0; rep < repeat; ++rep){
#pragma HLS loop_tripcount min=1 max=1 avg=1
        for(uint32_t j = 0; j < batch; ++j){
#pragma HLS loop_tripcount min=1 max=1 avg=1
            ap_uint<DDR_BITS * 2> fifo = 0;
            ap_uint<DDR_BITS> carry = 0;
            uint16_t idx = 0;
            int remains = 0;
            uint32_t output_idx = 0;
            ap_uint<DDR_BITS * 2> last = 0;
            for(uint32_t k = 0; k < OUTPUT_AIE; ++k){
                for(uint32_t t = 0; t < AIE_OUTPUT_CHUNK; ++t){
#pragma HLS pipeline II = 1
                    if(t < AIE_OUTPUT_CHUNK - 2){
                        ap_uint<DDR_BITS * 2> tmp = 0;
                        tmp(DDR_BITS - 1, 0) = serialize_out.read();
                        tmp += carry;
                        // fifo(remains + DDR_BITS - 1, remains) = tmp(DDR_BITS - 1, 0);
                        fifo += tmp << shift[idx];
                        carry = tmp(2 * DDR_BITS - 1, DDR_BITS);
                        if(output_idx < TASK_OUTPUT_CHUNK){
                            final_merge_out << fifo(DDR_BITS - 1, 0);
                            output_idx++;
                        }
                        fifo = (fifo >> DDR_BITS);
                    }else if(t == AIE_OUTPUT_CHUNK - 2){
                        last = 0;
                        last(DDR_BITS - 1, 0) = serialize_out.read();
                        last += carry;
                    }else if(t == AIE_OUTPUT_CHUNK - 1){
                        carry = serialize_out.read(); 
                        carry += last(LAST_VALID + DDR_BITS - 1, LAST_VALID);
                        // fifo(remains + LAST_VALID - 1, remains) = last(LAST_VALID - 1, 0);
                        fifo += last << shift[idx];
                        idx = (idx == 63 ? 0 : idx + 1);
                        remains += LAST_VALID;
                        if(remains >= DDR_BITS && output_idx < TASK_OUTPUT_CHUNK){
                            final_merge_out << fifo(DDR_BITS - 1, 0);
                            output_idx++;
                            remains -= DDR_BITS;
                            fifo = fifo >> DDR_BITS;
                        }
                    }
                }
            }
            if(output_idx < TASK_OUTPUT_CHUNK){
#pragma HLS loop_tripcount min=1 max=1 avg=1
                final_merge_out << fifo(DDR_BITS - 1, 0);
            }
        }
    }
}

void reorganize_a(hls::stream<ap_uint<PLIO_BITS> > &reorg_s, hls::stream<ap_uint<DDR_BITS> > &raw_data_s, const int batch, const uint32_t repeat){
    uint16_t shift[31] = {0, 16, 32, 48, 64, 80, 96, 112, 4, 20, 36, 52, 68, 84, 100, 116, 8, 24, 40, 56, 72, 88, 104, 120, 12, 28, 44, 60, 76, 92, 108};
    for(uint32_t rep = 0; rep < repeat; ++rep){
#pragma HLS loop_tripcount min=1 max=1 avg=1
        for(uint32_t bch = 0; bch < batch; ++bch){
#pragma HLS loop_tripcount min=1 max=1 avg=1
            uint16_t idx = 0;
            ap_uint<DDR_BITS + PLIO_BITS> fifo = 0;
            int remains = 0;
            uint32_t sent = 0;
            for(uint32_t i = 0; i < TASK_INPUT_CHUNK; ++i){
                for(uint32_t j = 0; j < 5; ++j){
#pragma HLS pipeline II = 1
                    if(j == 0){
                        ap_uint<DDR_BITS + PLIO_BITS> fifo_tmp = 0;
                        fifo_tmp(DDR_BITS - 1, 0) = raw_data_s.read();
                        fifo += fifo_tmp << shift[idx];
                        idx = (idx == 30 ? 0 : idx + 1);
                        // fifo(remains + DDR_BITS - 1, remains) = raw_data_s.read(); // buf[batch][i];
                        remains += DDR_BITS;
                    }
                    if(remains >= (PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS && sent < SENT_VALID){
                        ap_uint<PLIO_BITS> tmp = 0;
                        for(uint32_t k = 0; k < (PLIO_BITS / VEC_ELEM_BITS); ++k){
                            tmp(k * VEC_ELEM_BITS + VALID_BITS - 1, k * VEC_ELEM_BITS) = fifo(k * VALID_BITS + VALID_BITS - 1, k * VALID_BITS);
                        }
                        sent++;
                        fifo = fifo >> ((PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS);
                        remains -= (PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS;
                        reorg_s << tmp;
                    }
                }
            }

            for(uint32_t i = 0; i < TAILS_A / (PLIO_BITS / VEC_ELEM_BITS); ++i){
        #pragma HLS pipeline II = 1
                ap_uint<PLIO_BITS> tmp = 0;
                for(uint32_t k = 0; k < (PLIO_BITS / VEC_ELEM_BITS); ++k){
                    tmp(k * VEC_ELEM_BITS + VALID_BITS - 1, k * VEC_ELEM_BITS) = fifo(k * VALID_BITS + VALID_BITS - 1, k * VALID_BITS);
                }
                fifo = fifo >> ((PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS);
                reorg_s << tmp;
            }
        }
    }
}

void reorganize_b(hls::stream<ap_uint<PLIO_BITS> > &reorg_s, hls::stream<ap_uint<DDR_BITS> > &raw_data_s, const int batch, const uint32_t repeat){
    uint16_t shift[31] = {0, 16, 32, 48, 64, 80, 96, 112, 4, 20, 36, 52, 68, 84, 100, 116, 8, 24, 40, 56, 72, 88, 104, 120, 12, 28, 44, 60, 76, 92, 108};
    for(uint32_t rep = 0; rep < repeat; ++rep){
#pragma HLS loop_tripcount min=1 max=1 avg=1
        for(uint32_t bch = 0; bch < batch; ++bch){
#pragma HLS loop_tripcount min=1 max=1 avg=1
            uint16_t idx = 0;
            for(uint32_t i = 0; i < AIE_H / (PLIO_BITS / VEC_ELEM_BITS); ++i){
#pragma HLS pipeline II = 1
                ap_uint<PLIO_BITS> tmp = 0;
                reorg_s << tmp;
            }
            ap_uint<DDR_BITS + PLIO_BITS> fifo = 0;
            int remains = 0;
            uint32_t sent = 0;
            for(uint32_t i = 0; i < TASK_INPUT_CHUNK; ++i){
                for(uint32_t j = 0; j < 5; ++j){
#pragma HLS pipeline II = 1
                    if(j == 0){
                        ap_uint<DDR_BITS + PLIO_BITS> fifo_tmp = 0;
                        fifo_tmp(DDR_BITS - 1, 0) = raw_data_s.read();
                        fifo += fifo_tmp << shift[idx];
                        idx = (idx == 30 ? 0 : idx + 1);
                        // fifo(remains + DDR_BITS - 1, remains) = raw_data_s.read(); // buf[batch][i];
                        remains += DDR_BITS;
                    }
                    if(remains >= (PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS && sent < SENT_VALID){
                        ap_uint<PLIO_BITS> tmp = 0;
                        for(uint32_t k = 0; k < (PLIO_BITS / VEC_ELEM_BITS); ++k){
                            tmp(k * VEC_ELEM_BITS + VALID_BITS - 1, k * VEC_ELEM_BITS) = fifo(k * VALID_BITS + VALID_BITS - 1, k * VALID_BITS);
                        }
                        sent++;
                        fifo = fifo >> ((PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS);
                        remains -= (PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS;
                        reorg_s << tmp;
                    }
                }
            }

            for(uint32_t i = 0; i < TAILS_B / (PLIO_BITS / VEC_ELEM_BITS); ++i){
#pragma HLS pipeline II = 1
                ap_uint<PLIO_BITS> tmp = 0;
                for(uint32_t k = 0; k < (PLIO_BITS / VEC_ELEM_BITS); ++k){
                    tmp(k * VEC_ELEM_BITS + VALID_BITS - 1, k * VEC_ELEM_BITS) = fifo(k * VALID_BITS + VALID_BITS - 1, k * VALID_BITS);
                }
                fifo = fifo >> ((PLIO_BITS / VEC_ELEM_BITS) * VALID_BITS);
                reorg_s << tmp;
            }
        }
    }
}



void receive_plio(hls::stream<ap_uint<DDR_BITS>> &merge0_out, hls::stream<qdma_axis<PLIO_BITS, 0, 0, 0> > &plio, const uint32_t batch, const uint32_t repeat){
    uint16_t shift[64] = {0, 248, 496, 232, 480, 216, 464, 200, 448, 184, 432, 168, 416, 152, 400, 136, 384, 120, 368, 104, 352, 88, 336, 72, 320, 56, 304, 40, 288, 24, 272, 8, 256, 504, 240, 488, 224, 472, 208, 456, 192, 440, 176, 424, 160, 408, 144, 392, 128, 376, 112, 360, 96, 344, 80, 328, 64, 312, 48, 296, 32, 280, 16, 264};
    
    for(uint32_t rep = 0; rep < repeat; ++rep){
#pragma HLS loop_tripcount min=1 max=1 avg=1
        for(uint32_t bch = 0; bch < batch; ++bch){
#pragma HLS loop_tripcount min=1 max=1 avg=1
            uint16_t idx = 0;
            ap_uint<2 * VALID_BITS> carry = 0;
            ap_uint<DDR_BITS + VEC_SIZE * VALID_BITS> fifo = 0;
            int remains = 0;
            uint32_t output_idx = 0;
            for(uint32_t j = 0; j < AIE_W / VEC_SIZE; ++j){
                ap_uint<VALID_BITS * VEC_SIZE + 2 * VALID_BITS> res = 0;
                for(uint32_t v = 0; v < 3; ++v){
#pragma HLS pipeline II = 2
                    ap_uint<VALID_BITS * VEC_SIZE + 2 * VALID_BITS> p_vec = 0;
                    if(v == 0){
                        res += carry;
                    }
                    qdma_axis<PLIO_BITS, 0, 0, 0> tmp0;
                    qdma_axis<PLIO_BITS, 0, 0, 0> tmp1;
                    tmp0 = plio.read();
                    tmp1 = plio.read();
                    const uint32_t idx0 = 0 * (PLIO_BITS / VEC_ELEM_BITS) + 0;
                    p_vec((idx0 + 1) * VALID_BITS - 1, idx0 * VALID_BITS) = tmp0.data(0 * VEC_ELEM_BITS + VALID_BITS - 1, 0 * VEC_ELEM_BITS);

                    const uint32_t idx1 = 0 * (PLIO_BITS / VEC_ELEM_BITS) + 1;
                    p_vec((idx1 + 1) * VALID_BITS - 1, idx1 * VALID_BITS) = tmp0.data(1 * VEC_ELEM_BITS + VALID_BITS - 1, 1 * VEC_ELEM_BITS);

                    const uint32_t idx2 = 0 * (PLIO_BITS / VEC_ELEM_BITS) + 2;
                    p_vec((idx2 + 1) * VALID_BITS - 1, idx2 * VALID_BITS) = tmp0.data(2 * VEC_ELEM_BITS + VALID_BITS - 1, 2 * VEC_ELEM_BITS);

                    const uint32_t idx3 = 0 * (PLIO_BITS / VEC_ELEM_BITS) + 3;
                    p_vec((idx3 + 1) * VALID_BITS - 1, idx3 * VALID_BITS) = tmp0.data(3 * VEC_ELEM_BITS + VALID_BITS - 1, 3 * VEC_ELEM_BITS);

                    const uint32_t idx4 = 1 * (PLIO_BITS / VEC_ELEM_BITS) + 0;
                    p_vec((idx4 + 1) * VALID_BITS - 1, idx4 * VALID_BITS) = tmp1.data(0 * VEC_ELEM_BITS + VALID_BITS - 1, 0 * VEC_ELEM_BITS);

                    const uint32_t idx5 = 1 * (PLIO_BITS / VEC_ELEM_BITS) + 1;
                    p_vec((idx5 + 1) * VALID_BITS - 1, idx5 * VALID_BITS) = tmp1.data(1 * VEC_ELEM_BITS + VALID_BITS - 1, 1 * VEC_ELEM_BITS);

                    const uint32_t idx6 = 1 * (PLIO_BITS / VEC_ELEM_BITS) + 2;
                    p_vec((idx6 + 1) * VALID_BITS - 1, idx6 * VALID_BITS) = tmp1.data(2 * VEC_ELEM_BITS + VALID_BITS - 1, 2 * VEC_ELEM_BITS);

                    const uint32_t idx7 = 1 * (PLIO_BITS / VEC_ELEM_BITS) + 3;
                    p_vec((idx7 + 1) * VALID_BITS - 1, idx7 * VALID_BITS) = tmp1.data(3 * VEC_ELEM_BITS + VALID_BITS - 1, 3 * VEC_ELEM_BITS);

                    p_vec = p_vec << (v * VALID_BITS);

                    res += p_vec;
                    if(v == 2){
                        ap_uint<DDR_BITS + VEC_SIZE * VALID_BITS> fifo_tmp = 0;
                        fifo_tmp = res(VEC_SIZE * VALID_BITS - 1, 0);
                        fifo += fifo_tmp << shift[idx];
                        idx = (idx == 63 ? 0 : idx + 1);
                        remains += VEC_SIZE * VALID_BITS;
                        carry = res(VEC_SIZE * VALID_BITS + 2 * VALID_BITS - 1, VEC_SIZE * VALID_BITS);
                        if(remains >= DDR_BITS){
                            merge0_out << fifo(DDR_BITS - 1, 0);
                            fifo = (fifo >> DDR_BITS);
                            remains -= DDR_BITS;
                        }
                    }
                }
            }
            merge0_out << fifo(DDR_BITS - 1, 0);
            ap_uint<DDR_BITS> tmp = 0;
            tmp(2 * VALID_BITS - 1, 0) = carry;
            merge0_out << tmp;
        }
    }
}


void serialize_merge_stream(hls::stream<ap_uint<DDR_BITS>> &serialize_out, hls::stream<ap_uint<DDR_BITS>> &merge0_out, hls::stream<ap_uint<DDR_BITS>> &merge1_out, uint32_t size, uint32_t tails, uint32_t batch, uint32_t repeat){
    for(uint32_t rep = 0; rep < repeat; ++rep){
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < size; ++j){
#pragma HLS pipeline II = 1
                serialize_out << merge0_out.read();
            }
            for(uint32_t j = 0; j < tails; ++j){
#pragma HLS pipeline II = 1
                serialize_out << merge1_out.read();
            }
        }
    }
}




void split_input_a(hls::stream<ap_uint<PLIO_BITS>> &in_s, hls::stream<ap_uint<PLIO_BITS>> &in0_s, hls::stream<ap_uint<PLIO_BITS>> &in1_s, uint32_t size, uint32_t tails, const uint32_t batch, const uint32_t repeat){
    for(uint32_t rep = 0; rep < repeat; ++rep){
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < size; ++j){
#pragma HLS pipeline II = 1
                in0_s << in_s.read();
            }
            for(uint32_t j = 0; j < tails; ++j){
#pragma HLS pipeline II = 1
                in1_s << in_s.read();
            }
        }
    }
}

void send_plio(hls::stream<ap_uint<PLIO_BITS>> &in0_s, hls::stream<qdma_axis<PLIO_BITS, 0, 0, 0> > &plio, uint32_t size, const uint32_t batch, const uint32_t repeat){
    for(uint32_t rep = 0; rep < repeat; ++rep){
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < size; ++j){
#pragma HLS pipeline II = 1
                qdma_axis<PLIO_BITS, 0, 0, 0> tmp;
                tmp.data = in0_s.read();
                tmp.keep_all();
                plio.write(tmp);
            }
        }
    }
}


void split_input_b(hls::stream<ap_uint<PLIO_BITS>> &in_s, hls::stream<ap_uint<PLIO_BITS>> &in0_s, hls::stream<ap_uint<PLIO_BITS>> &in1_s, uint32_t size0, uint32_t size1, uint32_t size2, const uint32_t batch, const uint32_t repeat){
    for(uint32_t rep = 0; rep < repeat; ++rep){
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < size0; ++j){
#pragma HLS pipeline II = 1
                in0_s << in_s.read();
            }
            for(uint32_t j = 0; j < size1; ++j){
#pragma HLS pipeline II = 1
                ap_uint<PLIO_BITS> tmp = in_s.read();
                in0_s << tmp;
                in1_s << tmp;
            }
            for(uint32_t j = 0; j < size2; ++j){
#pragma HLS pipeline II = 1
                in1_s << in_s.read();
            }
        }
    }
}

void addition_shift_cmp(hls::stream<ap_uint<DDR_BITS>> &rsa_add_shift_out_s, hls::stream<ap_uint<DDR_BITS>> &rsa_add_shift_in0_s, hls::stream<ap_uint<DDR_BITS>> &rsa_add_shift_in1_s, hls::stream<ap_uint<DDR_BITS>> &rsa_add_shift_param_n_s, hls::stream<int> &rsa_add_shift_carry_s, uint32_t iterations){

    for(int itr = 0; itr < iterations; ++itr){
        char carry = 0;
        for(int i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
            ap_uint<DDR_BITS + 1> tmp = 0;
            tmp = rsa_add_shift_in0_s.read();
            ap_uint<DDR_BITS> tmp_in1 = rsa_add_shift_in1_s.read();
            tmp += tmp_in1;
            tmp += carry;
            carry = tmp[DDR_BITS];
        } // TODO: only check if not all zeros

        uint32_t addition_large = 0;
        uint32_t n_large = 0;

        for(int i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
            ap_uint<DDR_BITS + 1> tmp = 0;
            ap_uint<DDR_BITS> temp_n = rsa_add_shift_param_n_s.read();
            tmp = rsa_add_shift_in0_s.read();
            tmp += rsa_add_shift_in1_s.read();
            tmp += carry;
            carry = tmp[DDR_BITS];
            rsa_add_shift_out_s << tmp(DDR_BITS - 1, 0);
            if(temp_n > tmp(DDR_BITS - 1, 0)){
                n_large = i;
            } else if(temp_n < tmp(DDR_BITS - 1, 0)){
                addition_large = i;
            }
        }
        rsa_add_shift_carry_s << ((carry == 1 || addition_large > n_large) ? 1 : 0);
    }
}

void subtract_if_large(hls::stream<ap_uint<DDR_BITS>> &rsa_sub_out_s, hls::stream<ap_uint<DDR_BITS>> &rsa_sub_in_s, hls::stream<ap_uint<DDR_BITS>> &rsa_sub_param_n_s, hls::stream<int> &rsa_add_shift_carry_s, uint32_t iterations){
    hls::stream<ap_uint<DDR_BITS>> res0_fifo;
    hls::stream<ap_uint<DDR_BITS>> res1_fifo;
#pragma HLS STREAM variable = res0_fifo depth = 128
#pragma HLS STREAM variable = res1_fifo depth = 128
    for(uint32_t itr = 0; itr < iterations; ++itr){
        char carry = 0;
        for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
            ap_uint<DDR_BITS + 1> tmp = 0;
            ap_uint<DDR_BITS> tmp_n = rsa_sub_param_n_s.read();
            tmp = rsa_sub_in_s.read();
            res0_fifo << tmp(DDR_BITS - 1, 0);
            tmp[DDR_BITS] = 1;
            tmp -= tmp_n;
            tmp -= carry;
            res1_fifo << tmp(DDR_BITS - 1, 0);
            carry = tmp[DDR_BITS] == 1 ? 0 : 1;
        }
        int sel = rsa_add_shift_carry_s.read();
        for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
            ap_uint<DDR_BITS> res0 = res0_fifo.read();
            ap_uint<DDR_BITS> res1 = res1_fifo.read();
            if(sel == 1){
                rsa_sub_out_s << res1;
            }else{
                rsa_sub_out_s << res0;
            }
        }
    }
}

void montgomery_modular_multiplication_data_in_select(hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_data_in0_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_data_in1_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_partial_res_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_in_params_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_out_param_n_s, hls::stream<ap_uint<DDR_BITS>> &aim_mul_in0_s, hls::stream<ap_uint<DDR_BITS>> &aim_mul_in1_s, uint32_t batch, uint32_t repeat){
    ap_uint<DDR_BITS> buf_n[RSA_DATA_CHUNK];
    ap_uint<DDR_BITS> buf_nInv[RSA_DATA_CHUNK];

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        buf_n[i] = rsa_mmm_in_params_s.read();
        rsa_mmm_out_param_n_s << buf_n[i];
    }

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        buf_nInv[i] = rsa_mmm_in_params_s.read();
    }

    for(uint32_t rep = 0; rep < repeat; ++rep){

        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                aim_mul_in0_s << rsa_mmm_data_in0_s.read();
                aim_mul_in1_s << rsa_mmm_data_in1_s.read();
            }
        }

        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                aim_mul_in0_s << rsa_mmm_partial_res_s.read();
                aim_mul_in1_s << buf_nInv[j];
            }
        }

        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                aim_mul_in0_s << rsa_mmm_partial_res_s.read();
                aim_mul_in1_s << buf_n[j];
            }
        }

    }
}

void montgomery_modular_multiplication_data_out_select(hls::stream<ap_uint<DDR_BITS>> &aim_mul_out_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_partial_res_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_out_param_n_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_add_shift_in0_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_add_shift_in1_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_add_shift_param_n_s, hls::stream<ap_uint<DDR_BITS>> &rsa_mmm_sub_param_n_s, uint32_t batch, uint32_t repeat){
    ap_uint<DDR_BITS> buf_n[RSA_DATA_CHUNK];
    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        buf_n[i] = rsa_mmm_out_param_n_s.read();
    }

    for(uint32_t rep = 0; rep < repeat; ++rep){

        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                ap_uint<DDR_BITS> tmp = aim_mul_out_s.read();
                rsa_mmm_partial_res_s << tmp;
                rsa_mmm_add_shift_in0_s << tmp;
            }
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_add_shift_in0_s << aim_mul_out_s.read();
            }
        }

        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_partial_res_s << aim_mul_out_s.read();
            }
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                aim_mul_out_s.read();
            }
        }

        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_add_shift_in1_s << aim_mul_out_s.read();
            }
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_add_shift_in1_s << aim_mul_out_s.read();
                rsa_mmm_add_shift_param_n_s << buf_n[j];
                rsa_mmm_sub_param_n_s << buf_n[j];
            }
        }

    }
}

void large_rsa_data_in(hls::stream<ap_uint<DDR_BITS>> & rsa_data_in_s, hls::stream<ap_uint<DDR_BITS>> & rsa_mmm_in0_s, hls::stream<ap_uint<DDR_BITS>> & rsa_mmm_in1_s, hls::stream<ap_uint<DDR_BITS>> & large_rsa_partial_s, hls::stream<ap_uint<DDR_BITS>> & large_rsa_backup_s, hls::stream<ap_uint<DDR_BITS>> & rsa_data_in_params_s, uint32_t e_bits, uint32_t batch, uint32_t repeat){
    ap_uint<DDR_BITS> buf_rMod[RSA_DATA_CHUNK];
    ap_uint<DDR_BITS> buf_rMod_x_1[RSA_DATA_CHUNK];

    ap_uint<DDR_BITS> am[BATCH][RSA_DATA_CHUNK];
    ap_uint<DDR_BITS> pres[BATCH][RSA_DATA_CHUNK];

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        buf_rMod[i] = rsa_data_in_params_s.read();
    }

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        buf_rMod_x_1[i] = rsa_data_in_params_s.read();
        
    }

    for(uint32_t rep = 0; rep < repeat; ++rep){

        // montgomery representation (pres)
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_in0_s << rsa_data_in_s.read();
                rsa_mmm_in1_s << buf_rMod[j];
                pres[i][j] = buf_rMod_x_1[j];
            }
        }

        for(uint32_t e = 0; e < e_bits - 1; ++e){

            // read am & calculate am * pres
            for(uint32_t i = 0; i < batch; ++i){
                for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                    am[i][j] = large_rsa_partial_s.read();
                    rsa_mmm_in0_s << am[i][j];
                    rsa_mmm_in1_s << pres[i][j];
                    large_rsa_backup_s << pres[i][j];
                }
            }

            // am * am & update pres
            for(uint32_t i = 0; i < batch; ++i){
                for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                    rsa_mmm_in0_s << am[i][j];
                    rsa_mmm_in1_s << am[i][j];
                    pres[i][j] = large_rsa_partial_s.read();
                }
            }

        }

        // final round 
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_in0_s << large_rsa_partial_s.read();
                rsa_mmm_in1_s << pres[i][j];
                large_rsa_backup_s << pres[i][j];
            }
        }

        // de montgomery representation
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_mmm_in0_s << large_rsa_partial_s.read();
                if(j == 0){
                    ap_uint<DDR_BITS> tmp = 0;
                    tmp(0, 0) = 1;
                    rsa_mmm_in1_s << tmp;
                }else{
                    ap_uint<DDR_BITS> tmp = 0;
                    rsa_mmm_in1_s << tmp;
                }
            }
        }

    }
}

void large_rsa_data_out(hls::stream<ap_uint<DDR_BITS>> & rsa_data_out_s, hls::stream<ap_uint<DDR_BITS>> & rsa_mmm_out_s, hls::stream<ap_uint<DDR_BITS>> & large_rsa_partial_s, hls::stream<ap_uint<DDR_BITS>> & large_rsa_backup_s, hls::stream<ap_uint<DDR_BITS>> & rsa_data_out_param_e_s, uint32_t e_bits, uint32_t batch, uint32_t repeat){
    ap_uint<DDR_BITS> buf_e[RSA_DATA_CHUNK];
    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        buf_e[i] = rsa_data_out_param_e_s.read();
    }

    for(uint32_t rep = 0; rep < repeat; ++rep){
        // send data in montgomery representation
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                large_rsa_partial_s << rsa_mmm_out_s.read();
            }
        }

        for(uint32_t e = 0; e < e_bits - 1; ++e){

            // read am * rMod_x_1 and select
            bool sel = (buf_e[e / DDR_BITS][e % DDR_BITS] == 1);
            for(uint32_t i = 0; i < batch; ++i){
                for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                    ap_uint<DDR_BITS> tmp0 = rsa_mmm_out_s.read();
                    ap_uint<DDR_BITS> tmp1 = large_rsa_backup_s.read();
                    if(sel){
                        large_rsa_partial_s << tmp0;
                    }else{
                        large_rsa_partial_s << tmp1;
                    }
                }
            }

            // read am * am
            for(uint32_t i = 0; i < batch; ++i){
                for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                    large_rsa_partial_s << rsa_mmm_out_s.read();
                }
            }

        }

        // final select
        bool sel2 = (buf_e[(e_bits - 1) / DDR_BITS][(e_bits - 1) % DDR_BITS] == 1);
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                ap_uint<DDR_BITS> tmp0 = rsa_mmm_out_s.read();
                ap_uint<DDR_BITS> tmp1 = large_rsa_backup_s.read();
                if(sel2){
                    large_rsa_partial_s << tmp0;
                }else{
                    large_rsa_partial_s << tmp1;
                }
            }
        }

        // de montgomery representation
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_data_out_s << rsa_mmm_out_s.read();
            }
        }
    }
}

void read_ddr(ap_uint<DDR_BITS> *data_in, ap_uint<DDR_BITS> *mem_exp, ap_uint<DDR_BITS> *mem_n, ap_uint<DDR_BITS> *mem_nInv, ap_uint<DDR_BITS> *rMod, ap_uint<DDR_BITS> *rMod_x_1, hls::stream<ap_uint<DDR_BITS>> &rsa_data_in_s, hls::stream<ap_uint<DDR_BITS>> &rsa0_data_in_params_s, hls::stream<ap_uint<DDR_BITS>> &rsa0_data_out_param_e_s, hls::stream<ap_uint<DDR_BITS>> &rsa0_mmm_in_params_s, uint32_t batch, uint32_t repeat, bool block_ddr){
    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        rsa0_data_in_params_s << rMod[i];
    }

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        rsa0_data_in_params_s << rMod_x_1[i];
    }

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        rsa0_data_out_param_e_s << mem_exp[i];
    }

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        rsa0_mmm_in_params_s << mem_n[i];
    }

    for(uint32_t i = 0; i < RSA_DATA_CHUNK; ++i){
#pragma HLS pipeline II = 1
        rsa0_mmm_in_params_s << mem_nInv[i];
    }

    for(uint32_t rep = 0; rep < repeat; ++rep){
        uint32_t idx = 0;
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                rsa_data_in_s << data_in[idx++];
            }
        }
    }

}

void write_ddr(ap_uint<DDR_BITS> *mem_out, hls::stream<ap_uint<DDR_BITS>> &out_s, const uint32_t batch, const uint32_t repeat, const bool block_ddr){
    for(uint32_t rep = 0; rep < repeat; ++rep){
        uint32_t idx = 0;
        for(uint32_t i = 0; i < batch; ++i){
            for(uint32_t j = 0; j < RSA_DATA_CHUNK; ++j){
#pragma HLS pipeline II = 1
                ap_uint<DDR_BITS> tmp = out_s.read();
                if(!block_ddr){
                    mem_out[idx++] = tmp;
                }
            }
        }
    }
}

extern "C" {
void pl_kernel(ap_uint<DDR_BITS> *data_in, ap_uint<DDR_BITS> *data_out, ap_uint<DDR_BITS> *mem_exp, ap_uint<DDR_BITS> *mem_n, ap_uint<DDR_BITS> *mem_nInv, ap_uint<DDR_BITS> *rMod, ap_uint<DDR_BITS> *rMod_x_1, uint32_t e_bits, uint32_t batch, uint32_t repeat, const bool block_ddr \
            {%for i in range(AIE_ROW)%}, hls::stream<qdma_axis<PLIO_BITS, 0, 0, 0> > &p_0_a{{i}}{%endfor%} \
            {%for i in range(AIE_COL)%}, hls::stream<qdma_axis<PLIO_BITS, 0, 0, 0> > &p_0_b{{i}}{%endfor%} \
            {%for i in range(OUTPUT_AIE)%}, hls::stream<qdma_axis<PLIO_BITS, 0, 0, 0> > &p_0_c{{i}}{%endfor%}){

#pragma HLS interface m_axi offset=slave bundle=gmem0 port=data_in max_read_burst_length=16 num_read_outstanding=16
#pragma HLS interface m_axi offset=slave bundle=gmem0 port=data_out max_read_burst_length=16 num_read_outstanding=16
#pragma HLS interface m_axi offset=slave bundle=gmem1 port=mem_exp max_read_burst_length=16 num_read_outstanding=16
#pragma HLS interface m_axi offset=slave bundle=gmem2 port=mem_n max_read_burst_length=16 num_read_outstanding=16
#pragma HLS interface m_axi offset=slave bundle=gmem2 port=mem_nInv max_read_burst_length=16 num_read_outstanding=16
#pragma HLS interface m_axi offset=slave bundle=gmem2 port=rMod max_read_burst_length=16 num_read_outstanding=16
#pragma HLS interface m_axi offset=slave bundle=gmem2 port=rMod_x_1 max_read_burst_length=16 num_read_outstanding=16

#pragma HLS interface s_axilite bundle=control port=data_in
#pragma HLS interface s_axilite bundle=control port=data_out
#pragma HLS interface s_axilite bundle=control port=mem_exp
#pragma HLS interface s_axilite bundle=control port=mem_n
#pragma HLS interface s_axilite bundle=control port=mem_nInv
#pragma HLS interface s_axilite bundle=control port=rMod
#pragma HLS interface s_axilite bundle=control port=rMod_x_1

#pragma HLS interface s_axilite bundle=control port=e_bits
#pragma HLS interface s_axilite bundle=control port=batch
#pragma HLS interface s_axilite bundle=control port=repeat
#pragma HLS interface s_axilite bundle=control port=block_ddr

#pragma HLS interface s_axilite bundle=control port=return

    hls::stream<ap_uint<DDR_BITS>> rsa_data_in_s;
    hls::stream<ap_uint<DDR_BITS>> rsa_data_out_s;

    // rsa0 

    // params 
    hls::stream<ap_uint<DDR_BITS>> rsa0_data_in_params_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_data_out_param_e_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_in_params_s;

    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_out_param_n_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_add_shift_param_n_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_sub_param_n_s;

    // top
    hls::stream<ap_uint<DDR_BITS>> rsa0_partial_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_backup_s;
#pragma HLS STREAM variable = rsa0_partial_s depth = {{(8 * INPUT_BITS / DDR_BITS) | int}}
#pragma HLS STREAM variable = rsa0_backup_s depth = {{(8 * INPUT_BITS / DDR_BITS) | int}}
    // mmm
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_data_in0_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_data_in1_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_partial_res_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_out_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_add_shift_out_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_add_shift_in0_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mmm_add_shift_in1_s;
    hls::stream<int> rsa0_add_shift_carry_s;
#pragma HLS STREAM variable = rsa0_mmm_partial_res_s depth = {{(8 * INPUT_BITS / DDR_BITS) | int}}
#pragma HLS STREAM variable = rsa0_mmm_add_shift_in0_s depth = {{(8 * INPUT_BITS / DDR_BITS) | int}}

    // aim large
    hls::stream<ap_uint<DDR_BITS>> rsa0_mul_in0_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mul_in1_s;
    hls::stream<ap_uint<DDR_BITS>> rsa0_mul_out_s;
    hls::stream<ap_uint<PLIO_BITS>> rsa0_reorganized_a_s;
    hls::stream<ap_uint<PLIO_BITS>> rsa0_reorganized_b_s;

{% for i in range(AIE_ROW - 2) %}
    hls::stream<ap_uint<PLIO_BITS>> rsa0_pl_pa{{i}}_s;
{%- endfor %}

{% for i in range(AIE_ROW) %}
    hls::stream<ap_uint<PLIO_BITS>> rsa0_pl_a{{i}}_s;
{%- endfor %}

{% for i in range(AIE_ROW) %}
#pragma HLS STREAM variable = rsa0_pl_a{{i}}_s depth = {{(AIE_H / 2) | int}}
{%- endfor %}

{% for i in range(AIE_COL - 2) %}
    hls::stream<ap_uint<PLIO_BITS>> rsa0_pl_pb{{i}}_s;
{%- endfor %}

{% for i in range(AIE_COL) %}
    hls::stream<ap_uint<PLIO_BITS>> rsa0_pl_b{{i}}_s;
{%- endfor %}

{% for i in range(AIE_COL) %}
#pragma HLS STREAM variable = rsa0_pl_b{{i}}_s depth = {{(AIE_W / 2) | int}}
{%- endfor %}

{% for i in range(OUTPUT_AIE) %}
    hls::stream<ap_uint<DDR_BITS>> rsa0_merge0_c{{i}};
{%- endfor %}

{% for i in range(OUTPUT_AIE) %}
#pragma HLS STREAM variable = rsa0_merge0_c{{i}} depth = {{(AIE_W / 4) | int}}
{%- endfor %}



{% for i in range(OUTPUT_AIE - 2) %}
    hls::stream<ap_uint<DDR_BITS>> rsa0_merge0_pc{{i}};
{%- endfor %}

    hls::stream<ap_uint<DDR_BITS>> rsa0_serialized_out;

#pragma HLS dataflow
    

    read_ddr(data_in, mem_exp, mem_n, mem_nInv, rMod, rMod_x_1, rsa_data_in_s, rsa0_data_in_params_s, rsa0_data_out_param_e_s, rsa0_mmm_in_params_s, batch, repeat, block_ddr);
    write_ddr(data_out, rsa_data_out_s, batch, repeat, block_ddr);


    large_rsa_data_in(rsa_data_in_s, rsa0_mmm_data_in0_s, rsa0_mmm_data_in1_s, rsa0_partial_s, rsa0_backup_s, rsa0_data_in_params_s, e_bits, batch, repeat);
    large_rsa_data_out(rsa_data_out_s, rsa0_mmm_out_s, rsa0_partial_s, rsa0_backup_s, rsa0_data_out_param_e_s, e_bits, batch, repeat);

    montgomery_modular_multiplication_data_in_select(rsa0_mmm_data_in0_s, rsa0_mmm_data_in1_s, rsa0_mmm_partial_res_s, rsa0_mmm_in_params_s, rsa0_mmm_out_param_n_s, rsa0_mul_in0_s, rsa0_mul_in1_s, batch, repeat * (e_bits * 2 + 1));
    montgomery_modular_multiplication_data_out_select(rsa0_mul_out_s, rsa0_mmm_partial_res_s, rsa0_mmm_out_param_n_s, rsa0_mmm_add_shift_in0_s, rsa0_mmm_add_shift_in1_s, rsa0_add_shift_param_n_s, rsa0_sub_param_n_s, batch, repeat * (e_bits * 2 + 1));

    reorganize_a(rsa0_reorganized_a_s, rsa0_mul_in0_s, batch, repeat * (e_bits * 2 + 1) * 3);
    reorganize_b(rsa0_reorganized_b_s, rsa0_mul_in1_s, batch, repeat * (e_bits * 2 + 1) * 3);
{% if AIE_ROW == 2 %}
    split_input_a(rsa0_reorganized_a_s, rsa0_pl_a0_s, rsa0_pl_a1_s, AIE_H / (PLIO_BITS / 32), AIE_H / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
{% else %}
    split_input_a(rsa0_reorganized_a_s, rsa0_pl_a0_s, rsa0_pl_pa0_s, AIE_H / (PLIO_BITS / 32), AIE_H / (PLIO_BITS / 32) * {{AIE_ROW - 1}}, batch, repeat * (e_bits * 2 + 1) * 3);
    {% for i in range(AIE_ROW - 3) %}
    split_input_a(rsa0_pl_pa{{i}}_s, rsa0_pl_a{{i + 1}}_s, rsa0_pl_pa{{i + 1}}_s, AIE_H / (PLIO_BITS / 32), AIE_H / (PLIO_BITS / 32) * {{AIE_ROW - 2 - i}}, batch, repeat * (e_bits * 2 + 1) * 3);
    {%- endfor %}
    split_input_a(rsa0_pl_pa{{AIE_ROW - 3}}_s, rsa0_pl_a{{AIE_ROW - 2}}_s, rsa0_pl_a{{AIE_ROW - 1}}_s, AIE_H / (PLIO_BITS / 32), AIE_H / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
{%- endif %}

{% for i in range(AIE_ROW) %}
    send_plio(rsa0_pl_a{{i}}_s, p_0_a{{i}}, AIE_H / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
{%-endfor%}
    {# send_plio(rsa0_pl_a0_s, p_0_a0, AIE_H / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
    send_plio(rsa0_pl_a1_s, p_0_a1, AIE_H / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3); #}


    split_input_b(rsa0_reorganized_b_s, rsa0_pl_b0_s, rsa0_pl_pb0_s, AIE_H / (PLIO_BITS / 32), AIE_W / (PLIO_BITS / 32), AIE_W * {{AIE_COL - 1}} / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
{% for i in range(AIE_COL - 3) %}
    split_input_b(rsa0_pl_pb{{i}}_s, rsa0_pl_b{{i + 1}}_s, rsa0_pl_pb{{i + 1}}_s, AIE_H / (PLIO_BITS / 32), AIE_W / (PLIO_BITS / 32), AIE_W * {{AIE_COL - 2 - i}} / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
{%- endfor %}
    split_input_b(rsa0_pl_pb{{AIE_COL - 3}}_s, rsa0_pl_b{{AIE_COL - 2}}_s, rsa0_pl_b{{AIE_COL - 1}}_s, AIE_H / (PLIO_BITS / 32), AIE_W / (PLIO_BITS / 32), AIE_W / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);

{% for i in range(AIE_COL) %}
    send_plio(rsa0_pl_b{{i}}_s, p_0_b{{i}}, (AIE_W + AIE_H) / (PLIO_BITS / 32), batch, repeat * (e_bits * 2 + 1) * 3);
{%- endfor %}

{% for i in range(OUTPUT_AIE) %}
    receive_plio(rsa0_merge0_c{{i}}, p_0_c{{i}}, batch, repeat * (e_bits * 2 + 1) * 3);
{%- endfor %}


    serialize_merge_stream(rsa0_serialized_out, rsa0_merge0_c0, rsa0_merge0_pc0, AIE_OUTPUT_CHUNK, AIE_OUTPUT_CHUNK * {{OUTPUT_AIE - 1}}, batch, repeat * (e_bits * 2 + 1) * 3);
{% for i in range(OUTPUT_AIE - 3) %}
    serialize_merge_stream(rsa0_merge0_pc{{i}}, rsa0_merge0_c{{i + 1}}, rsa0_merge0_pc{{i + 1}}, AIE_OUTPUT_CHUNK, AIE_OUTPUT_CHUNK * {{OUTPUT_AIE - 2 - i}}, batch, repeat * (e_bits * 2 + 1) * 3);
{%- endfor %}
    serialize_merge_stream(rsa0_merge0_pc{{OUTPUT_AIE - 3}}, rsa0_merge0_c{{OUTPUT_AIE - 2}}, rsa0_merge0_c{{OUTPUT_AIE - 1}}, AIE_OUTPUT_CHUNK, AIE_OUTPUT_CHUNK, batch, repeat * (e_bits * 2 + 1) * 3);

    merge_phase2(rsa0_mul_out_s, rsa0_serialized_out, batch, repeat * (e_bits * 2 + 1) * 3);

    addition_shift_cmp(rsa0_add_shift_out_s, rsa0_mmm_add_shift_in0_s, rsa0_mmm_add_shift_in1_s, rsa0_add_shift_param_n_s, rsa0_add_shift_carry_s, repeat * (e_bits * 2 + 1) * batch);
    subtract_if_large(rsa0_mmm_out_s, rsa0_add_shift_out_s, rsa0_sub_param_n_s, rsa0_add_shift_carry_s, repeat * (e_bits * 2 + 1) * batch);

    
}

}